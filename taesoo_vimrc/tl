#!/usr/bin/env lua
local isWin=string.find(string.lower(os.getenv('OS') or 'nil'),'windows')~=nil
if isWin then
	package.path =os.getenv('HOMEDRIVE')..os.getenv('HOMEPATH').."/bin/?.lua" .. ";"..package.path 
	if os.getenv('HOME') then
		package.path =os.getenv('HOME').."/bin/?.lua" .. ";"..package.path 
	end
else
	package.path =os.getenv('HOME').."/bin/?.lua" .. ";"..package.path 
end
if _VERSION=='Lua 5.2' then
	require("mylib52")
else
	require("mylib")
end

local original = require'fzy_lua'

-- for wsl users
--local scriptPrefix= 'cd ~/sample_physX/work;GALLIUM_DRIVER=llvmpipe ./nopython '

-- to use taesooLib with PhysX simulator and without python3 dependency
--local scriptPrefix= 'cd ~/sample_physX/work;./nopython '

-- to use windows-native taesooLib without python3 dependency
--local scriptPrefix= 'cd '..os.home_path()..'\\sample_torch\\work;.\\release\\nopython '

-- to use taesooLib with PhysX simulator and with python3 dependency
--local scriptPrefix= 'cd ~/sample_physX/work;python3 test_sample_python.py '

-- to use taesooLib with python3 dependency
local scriptPrefix= 'cd ~/sample_python/work;python3 test_sample_python.py '

if os.isWindows() then
	local execute2_original=os.execute2
	function os.execute2(cmd)
		local cmdsep=string.tokenize(cmd,';')
		execute2_original(unpack(cmdsep))
	end
end

function filter(fzy, needle, lines)
  results = {}
  for i, line in ipairs(lines) do
    if fzy.has_match(needle, line) then
      local positions = fzy.positions(needle, line)
      table.insert(results, {line, positions})
    end
  end
  return results
end

function lsFiles(wildcard)
	if os.isWindows() then
		local i, t, popen = 0, {}, io.popen
		for filename in popen('dir "'..wildcard..'" /b'):lines() do
			i = i + 1
			t[i] = filename
		end
		return t
	else
		local files=string.lines(os.capture('ls -1 *.lua', true))
		files[#files]=nil
		return files
	end
end

function main()

	local files= lsFiles('*.lua')

	local pattern
	if arg[1] and arg[1]~='-p' then
		pattern=arg[1]

	end
	if not pattern then
		local tl=os.processFileName(arg[0])
		print('usage: '..tl..' wrlv')
		print('current setting: '..scriptPrefix..' path_to_wrlv.lua')
		return
	end

	local res=filter(original, arg[1], files)

	local succeeded=false
	if #res==1 then
		succeeded=true
	elseif #res==0 then
		print('no matches found')
	else
		print('multiple matches:')
		printTable(res)

		-- still ok.
		-- search for the best one
		local MIN_DIST=100000
		local argmin=1

		for i, v in ipairs(res) do
			--local editDist=v[2][1]-1
			local editDist=0 -- ignore prefix distance
			for j=2, #v[2] do
				editDist=editDist+v[2][j]-v[2][j-1]-1
			end
			editDist=editDist+(v[1]:len()-v[2][#v[2]] )*0.001 -- postfix distance uses a low-weight
			
			if editDist<MIN_DIST then
				argmin=i
				MIN_DIST=editDist
			end
		end
		res[1]=res[argmin]

		succeeded=true
	end
	if succeeded then
		local currDir=os.currentDirectory()
		print(scriptPrefix..'"'..currDir..'/'..res[1][1]..'"')
		if os.isWindows() then
			os.execute2(scriptPrefix..'"'..os.toWindowsFileName(currDir..'/'..res[1][1])..'"')
		else
			os.execute2(scriptPrefix..'"'..currDir..'/'..res[1][1]..'"')
		end
	else
		print('searching using "git ls-files"...')
		dofile(os.getenv('HOME')..'/bin/gitv')

		local fn=nonInteractiveChoose({arg[1]})
		if #fn==1 then
			local currDir=os.currentDirectory()
			print(scriptPrefix..'"'..currDir..'/'..fn[1][1]..'"')
			if os.isWindows() then
				os.execute2(scriptPrefix..'"'..os.toWindowsFileName(currDir..'/'..fn[1][1])..'"')
			else
				os.execute2(scriptPrefix..'"'..currDir..'/'..fn[1][1]..'"')
			end
		else
			printTable(fn)
			print('Error! cannot find '..arg[1].. ' in both "ls" and "git ls-files"!')
		end
	end
end

main()
